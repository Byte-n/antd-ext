---
description: 组件index.md功能演示内容规范
globs: "src/*/index.md"
alwaysApply: false
---

# 组件文档 index.md 编写规范

## 文档结构

### 1. Front Matter
```yaml
---
category: Components
group:
  title: 数据录入/反馈/通用  # 根据组件类型选择
  order: 数字  # 组内排序
title: 组件名
subtitle: 组件中文名
description: 组件功能描述，简洁明了
---
```

### 2. 文档主体结构
```markdown
# 组件名 中文名

组件功能描述，简洁明了。

## 代码演示

### 基础用法

<code src="./demo/basic.tsx"></code>

### 高级用法

<code src="./demo/advanced.tsx"></code>

## Props

| 参数 | 说明 | 类型 | 默认值 |
| --- | --- | --- | --- |
| 参数名 | 说明 | 类型 | 默认值 |

## 特性

- **特性1**: 描述
- **特性2**: 描述
```

## 编写规则

### 1. 内容要求
- **中文编写**: 所有内容必须使用中文
- **简洁明了**: 避免冗长段落，使用列表和粗体突出重点
- **实用导向**: 专注于实际使用场景
- **代码示例**: 每个功能都有对应的 demo 文件

### 2. 功能演示规范

#### 对于 Enhance 开头的组件：
- **仅展示新增功能**: 只展示组件新增的 prop 相关功能
- **仅展示改动功能**: 只展示组件改动的 prop 相关功能
- **不展示基础用法**: 不展示与原生组件相同的基础用法
- **不展示 ref 相关**: 不展示任何 ref 相关的演示

#### 对于其他组件：
- **展示核心功能**: 展示组件的主要使用场景
- **展示特色功能**: 展示组件的独特功能
- **可选择性展示 ref**: 仅在必要时展示 ref 相关功能

### 3. Demo 文件规范

#### 文件组织
- 位置：组件目录下的 `demo` 子目录
- 命名：短横线连接的小写英文单词
- 扩展名：`.tsx`

### 4. Props 表格规范

#### 表格结构
| 参数 | 说明 | 类型 | 默认值 |
| --- | --- | --- | --- |

#### 内容要求
- **参数名**: 使用代码格式 `参数名`
- **说明**: 简洁明了的功能描述
- **类型**: 使用代码格式，复杂类型可分行
- **默认值**: 使用代码格式，无默认值用 `-`

#### 继承属性
- 在表格最后一行说明继承的属性
- 格式：`... | - | - | 继承 原组件 的所有属性，除了 排除的属性`

### 5. 特性说明规范

#### 格式要求
- 使用无序列表
- 每个特性用粗体标记
- 冒号后跟简洁描述

#### 内容要求
- **核心特性**: 突出组件的主要功能
- **技术特性**: 说明技术优势
- **兼容性**: 说明向后兼容性
- **性能**: 说明性能优化

### 6. 特殊组件规范

#### Enhance 组件特殊要求
- **功能聚焦**: 只展示增强功能，不展示基础功能
- **对比说明**: 可适当说明与原生组件的差异
- **新增属性**: 重点展示新增的 props
- **改动属性**: 重点展示改动的 props

#### 复杂组件规范
- **子组件**: 单独列出子组件的 API
- **配置项**: 详细说明配置对象的结构
- **主题定制**: 说明主题配置项
- **本地化**: 说明本地化配置

### 7. 代码示例规范

#### Demo 文件要求
- **单一功能**: 每个 demo 聚焦一个功能点
- **完整可运行**: 确保代码可以直接运行
- **有意义的数据**: 使用有意义的数据和变量名
- **适当注释**: 在关键处添加简洁注释

#### 代码质量
- **无控制台错误**: 确保代码运行正常
- **浏览器兼容**: 适配常见浏览器
- **性能考虑**: 适当使用 `useMemo`/`useCallback`
- **类型安全**: 为复杂数据定义清晰接口

### 8. 文档质量要求

#### 内容质量
- **准确性**: 确保所有信息准确无误
- **完整性**: 覆盖组件的主要功能
- **一致性**: 保持与其他文档的一致性
- **时效性**: 及时更新到最新 API

#### 格式质量
- **Markdown 规范**: 遵循 Markdown 语法规范
- **表格对齐**: 确保表格内容对齐
- **代码格式**: 使用正确的代码块格式
- **链接有效**: 确保所有链接有效

## 示例模板

```markdown
---
category: Components
group:
  title: 数据录入
  order: 1
title: ComponentName
subtitle: 组件中文名
description: 组件功能描述
---

# ComponentName 组件中文名

组件功能描述。

## 代码演示

### 基础用法

<code src="./demo/basic.tsx"></code>

### 高级用法

<code src="./demo/advanced.tsx"></code>

## Props

| 参数 | 说明 | 类型 | 默认值 |
| --- | --- | --- | --- |
| prop1 | 说明 | `string` | `'default'` |
| prop2 | 说明 | `number` | `0` |
| ... | - | - | 继承原组件的所有属性 |

## 特性

- **特性1**: 描述
- **特性2**: 描述
- **向后兼容**: 完全兼容原组件
```
```

## 总结

我基于对项目中所有 index.md 文件的分析，制定了一个完整的编写规范。这个规范特别针对 Enhance 开头的组件添加了以下规则：

1. **仅展示新增功能**: 只展示组件新增的 prop 相关功能
2. **仅展示改动功能**: 只展示组件改动的 prop 相关功能  
3. **不展示基础用法**: 不展示与原生组件相同的基础用法
4. **不展示 ref 相关**: 不展示任何 ref 相关的演示

这个规范涵盖了文档结构、内容要求、代码示例、Props 表格、特性说明等各个方面，确保所有组件的文档都能保持一致的风格和质量。