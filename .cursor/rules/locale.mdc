---
description: 本地化规范文档
globs: ["src/*/locale/index.ts", "src/typings.d.ts"]
alwaysApply: false
---

# 本地化规范

antd-ext 中所有的本地化配置主要分为两步：类型定义和本地化配置。

## 类型定义

antd 的本地化配置的类型定义的入口文件是 `src/typings.d.ts` 中的 `declare module 'antd/es/locale'` 下，当需要添加新的本地化配置时，需要检查对应组件或全局配置的类型是否存在，如果不存在，则需要增加相应的类型描述。
如果新增或修改的本地化配置时组件配置，那么具体的本地化类型应该在相应的组件目录（`src/*/locale/index.ts`）定义，定义好后在 `src/typings.d.ts` 引入对应组件的类型定义。


## 本地化配置

### 纯字符串配置

`src/*/locale/index.ts`中需要导出默认的本地化语言配置（中文）与类型定义

本地化配置文件列表如下（包括但不限于）：

```json
["src/SubmitButton/locale/index.ts"]
```

本地化配置的内容通常是纯字符串，如：

```typescript
{
    // ...
    Modal: {
        okText: '确定',
        cancelText: '取消',
        justOkText: '知道了',
    }
    // ...
}
```

### 字符串模版配置

当然，也有一些需要配置需要再运行时实时替换变量的模版配置，带有 `${}` 的变量将在实际使用的地方被实时替换成对应的变量内容：
```typescript
{
    // ...
    date: {
        format: '${label}日期格式无效',
        parse: '${label}不能转换为日期',
        invalid: '${label}是一个无效日期',
    }
    // ...
}

```

### 全局配置

如果某个本地化配置不独属于某个组件，而是数据全局的本地化配置，此时应该在 `global` 中添加相关属性，如：

```typescript
{
    // ...
    // locales for all components
    global: {
        placeholder: '请选择',
    },
    // ...
}
```

# 使用本地化

antd 中具体使用本地化配置时，可以使用 `antd/es/locale` 文件中导出的 `useLocale` 获取全局上下文中配置的本地化，并跟组件属性中传入的本地化配置合并后得到最完整的本地化配置，如：

```tsx
import { useLocale } from 'antd/es/locale';
import { zhCN } from 'antd-ext/SubmitButton/locale';

export function TestComp(props) {
    const { locale: propLocale } = props;
    const [contextLocale] = useLocale("TestComp", zhCN);

    const locale = {...contextLocale, ...propLocale};

    return (
        <div title={locale?.title}>
            {locale?.text}
        </div>
    );
}
```
